input_1.addEventListener("change", function () {
  // Check if a file was selected
  if (this.files && this.files.length > 0) {
    // Get the first file in the list of files
    var file = this.files[0];

    const reader = new FileReader();
    reader.onload = function (event) {
      // Read the Excel file and extract the data

      // Create a new instance of the ExcelJS Workbook class

      var workbook = new ExcelJS.Workbook();
      workbook.xlsx.load(reader.result) .then(() => {
        // Use the getWorksheet method to access the worksheets in the workbook
        const worksheet = workbook.getWorksheet('Sheet1');
    
        // Use the eachRow method to iterate through the rows in the worksheet
        worksheet.eachRow(row => {
          // Use the values property to access the cell values in the row
          const values = row.values;
          console.log(values);
        });
      });
    };
    reader.readAsArrayBuffer(file);

    // Read the file data into the workbook
  }
});

// INput 2
input_2.addEventListener("change", function () {
  // Check if a file was selected
  if (this.files && this.files.length > 0) {
    // Get the first file in the list of files
    var file = this.files[0];

    const reader = new FileReader();
    reader.onload = function (event) {
      // Read the Excel file and extract the data

      // Create a new instance of the ExcelJS Workbook class

      var workbook = new ExcelJS.Workbook();
      workbook.xlsx.load(reader.result) .then(() => {
        // Use the getWorksheet method to access the worksheets in the workbook
        const worksheet = workbook.getWorksheet('Sheet1');
    
        // Use the eachRow method to iterate through the rows in the worksheet
        worksheet.eachRow(row => {
          // Use the values property to access the cell values in the row
          const values = row.values;
          console.log(values);
        });
      });
    };
    reader.readAsArrayBuffer(file);

    // Read the file data into the workbook
  }
});










onst exceljs = require('exceljs');

// Create a FileReader object
const reader = new FileReader();

// Read the first Excel file using the 'readAsArrayBuffer' method
reader.readAsArrayBuffer('file1.xlsx');
reader.onload = () => {
  // Create a 'Workbook' object from the array buffer
  const workbook1 = new exceljs.Workbook();
  workbook1.xlsx.load(reader.result).then(() => {
    // Parse the data from the first workbook and store it in variables or arrays
    const data1 = [];
    workbook1.eachSheet((worksheet) => {
      worksheet.eachRow((row) => {
        data1.push(row.values);
      });
    });

    // Read the second Excel file using the 'readAsArrayBuffer' method
    reader.readAsArrayBuffer('file2.xlsx');
    reader.onload = () => {
      // Create a 'Workbook' object from the array buffer
      const workbook2 = new exceljs.Workbook



      const exceljs = require('exceljs');

// Read the contents of the first Excel file using the FileReader API
const fileReader1 = new FileReader();
fileReader1.readAsArrayBuffer('file1.xlsx');
fileReader1.onload = function() {
  // Parse the array buffer and load it into a Workbook object
  const workbook1 = new exceljs.Workbook();
  workbook1.xlsx.load(fileReader1.result).then(() => {
    // Read the contents of the second Excel file using the FileReader API
    const fileReader2 = new FileReader();
    fileReader2.readAsArrayBuffer('file2.xlsx');
    fileReader2.onload = function() {
      // Parse the array buffer and load it into a Workbook object
      const workbook2 = new exceljs.Workbook();
      workbook2.xlsx


      to parse the data from the Excel files and store it in variables or arrays
      workbook1.xlsx.load(firstExcelFile).then(function() {
  workbook2.xlsx.load(secondExcelFile).then(function() {
    //     // Compare the two workbooks using the 'compare' method
    const comparison = workbook1.compare(workbook2);

    // Output the comparison results
    console.log(comparison);
  });
});




 // Get the input element that contains the uploaded files
   
  
    // Get the list of uploaded files
    const input_files_1 = input_1.files;
    const input_files_2 = input_2.files;

    if (input_files_1 && input_files_1.length > 0) {
      // Get the first file in the list of files
      var file1 = input_files_1[0];
  
      const reader = new FileReader();
      reader.onload = function (event) {
        // Read the Excel file and extract the data
        const data = event.target.result;
        // Create a new instance of the ExcelJS Workbook class

  
        // Store the contents of the first Excel file in a variable
    const firstExcelFile = data;


      };
      reader.readAsBinaryString(file1);
    }



    // Check if a file was selected
    if (input_files_2 && input_files_2.length > 0) {
      // Get the first file in the list of files
      var file2 = input_files_2[0];
  
      const reader = new FileReader();
      reader.onload = function (event) {
        // Read the Excel file and extract the data
        const data = event.target.result;
        // Store the contents of the second Excel file in a variable
        const secondExcelFile = data;
        
      };

      reader.readAsBinaryString(file2);
  
      // Read the file data into the workbook


    }

    const workbook1 = new ExcelJS.Workbook();
    const workbook2 = new ExcelJS.Workbook();

    workbook1.xlsx.load(firstExcelFile).then(function() {
      workbook2.xlsx.load(secondExcelFile).then(function() {
        // Compare the two workbooks using the 'compare' method
        const comparison = workbook1.compare(workbook2);
    
        // Output the comparison results
        console.log(comparison);

      });
    });
    

  









  const form = document.getElementById("file-upload__form");

// const submitButton = document.getElementById("btnUpload");

// submitButton.addEventListener("click", () => {
//   // Listen for the 'click' event on the submit button
  
//   form.addEventListener("submit", handleSubmit);
  
//   function handleSubmit(e) {
//   e.preventDefault();


//     // Get the input element that contains the uploaded files
//     const input_files_1 = input_1.files;
//     const input_files_2 = input_2.files;

//     if (input_files_1 && input_files_1.length > 0) {
//       // Get the first file in the list of files
//       var file1 = input_files_1[0];

//       const reader = new FileReader();
//       reader.onload = function (event) {
//         // Read the Excel file and extract the data
//         const data = event.target.result;
//         // Store the contents of the first Excel file in a variable
//         const firstExcelFile = data;
        
//         reader.readAsBinaryString(file1);
        
//         // Create a new instance of the ExcelJS Workbook class
//         const workbook1 = new ExcelJS.Workbook();
//         workbook1.xlsx.load(firstExcelFile).then(function () {
//           // Check if a file was selected
//           if (input_files_2 && input_files_2.length > 0) {
//             // Get the first file in the list of files
//             var file2 = input_files_2[0];

//             const reader = new FileReader();
//             reader.onload = function (event) {
//               // Read the Excel file and extract the data
//               const data = event.target.result;
//               // Store the contents of the second Excel file in a variable
//               const secondExcelFile = data;

//               reader.readAsBinaryString(file2);

//               // Read the file data into the workbook

//               const workbook2 = new ExcelJS.Workbook();

//               workbook2.xlsx.load(secondExcelFile).then(function () {
//                 // Compare the two workbooks using the 'compare' method
//                 const comparison = workbook1.compare(workbook2);

//                 // Output the comparison results
//                 console.log(comparison);
//               });
//             };
//           }
//         });
//       };
//     }
   
// }
// });


// 1. Create a HTML form that allows users to select and upload the two Excel files

// <form id="upload-form">
//   <input type="file" id="file1" accept=".xlsx">
//   <input type="file" id="file2" accept=".xlsx">
//   <button type="submit">Upload Files</button>
// </form>


Upload and compare excel files using file Reader API and Excel JS  const reader = new FileReader();
reader.readAsBinaryString(input_1);
reader.onload = (e) => {
  const binaryData = e.target.result;
  // do something with the binary data
  console.log(binaryData);
}



// // Compare the two workbooks using the 'compare' method
// const comparison = worksheet1.compare(worksheet2);

// // Output the comparison results
// console.log(worksheet1, worksheet2);

                  // Get the cell at the first row and first column
                  const cell1 = worksheet1.getCell('B6');
                  const cell2 = worksheet2.getCell('B6');
                
                  // Use the cell object to access the cell's value, data type, and other properties
                  console.log(cell1.value);
                  console.log(cell1.type);
                  console.log(cell2.value);
                  console.log(cell2.type);









Compare and display resuklts in the console
                
const worksheet2 = workbook2.getWorksheet(1);

                for (let i = 1; i <= worksheet1.rowCount; i++) {
                  for (let j = 1; j <= worksheet1.columnCount; j++) {
                    if (worksheet1.getCell(i, j).value !== worksheet2.getCell(i, j).value) {
                      console.log(`Cell (${i},${j}) does not match: ${worksheet1.getCell(i, j).value} vs ${worksheet2.getCell(i, j).value}`);
                    }
                  }
                }






Excel strram upload files

                
  const workbookWriter = new ExcelJS.stream.xlsx.WorkbookWriter({
                  filename: 'comparison-results.xlsx'
                });
                const worksheet = workbookWriter.addWorksheet('Sheet1');
                
                Object.keys(comparisonResults).forEach(function (cellAddress) {
                  const data = comparisonResults[cellAddress];
                
                  worksheet.addRow([
                    data.firstFileName,
                    data.firstFile,
                    data.secondFileName,
                    data.secondFile
                  ]);
                });
                
                workbookWriter.commit();









const data = {
  name: "John Doe",
  email: "johndoe@example.com",
  phone: "123-456-7890"
};

const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet("Sheet1");

worksheet.addRow([data.name, data.email, data.phone]);

workbook.xlsx.writeFile("data.xlsx").then(function() {
  console.log("Excel file saved!");
});


document
                      //   .querySelectorAll(".equal-file-info")
                      //   .forEach(function (element) {
                      //     element.textContent = "These files are equal!";
                      //   });





















for (let i = 1; i <= worksheet1.rowCount; i++) {
                  for (let j = 1; j <= worksheet1.columnCount; j++) {
                    const cellAddress = `${i}${j}`;

                    
                    if (
                      worksheet1.getCell(i, j).value !==
                      worksheet2.getCell(i, j).value
                    ) {
                      comparisonResults[cellAddress] = {
                        firstFileName: input_files_1[0].name,
                        firstFile: `${worksheet1.getCell(i, j).value}`,
                        secondFileName: input_files_2[0].name,
                        secondFile: `${worksheet2.getCell(i, j).value}`,
                      };

                      console.log(comparisonResults[cellAddress]);
                    } else if (
                      worksheet1.getCell(i, j).value ===
                      worksheet2.getCell(i, j).value
                      ) {
                     
                        const equalFileInfoElement = document.querySelector(".equal-file-info");
                        if (equalFileInfoElement) {
                          equalFileInfoElement.innerText = "These files are equal!";
                        }
  
                    }
                  }
                }
                const data_file = comparisonResults[cellAddress];

                // const cellAddress = `${i}${j}`;


                // const data = comparisonResults[cellAddress];

                const workbook = new ExcelJS.Workbook();
                const worksheet = workbook.addWorksheet("Sheet1");

                worksheet.addRow([
                  data_file.firstFileName,
                  data_file.firstFile,
                  data_file.secondFileName,
                  data_file.secondFile,
                ]);

                workbook.xlsx
                  .writeFile("comparison-results.xlsx")
                  .then(function () {
                    console.log("Excel file saved!");
                  });




const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet("Sheet1");
for (const cellAddress in comparisonResults) {
  const data = comparisonResults[cellAddress];
  worksheet.addRow([
    data.firstFileName,
    

    const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet("Sheet1");
for (const cellAddress in comparisonResults) {
  const data = comparisonResults[cellAddress];
  worksheet.addRow([
    data.firstFileName,
    

    const comparisonResults = {};
for (let i = 1; i <= worksheet1.rowCount; i++) {
  for (let j = 1; j <= worksheet2.columnCount; j++) {
    const cellAddress = `${i}${j}`;
    if (
      worksheet1.getCell(i, j).value !==
      worksheet2.getCell(i, j).value
    ) {
      comparisonResults[cellAddress] = {
        firstFileName: input_files_1[0].name,
        firstFile: `${worksheet1.getCell(i, j).value}`,
        secondFileName: input_files_2[0].name,
        secondFile: `${worksheet2.getCell(i, j).value}`,
      };
    }
  }
}

if (Object.keys(comparisonResults).length === 0) {
  const equalFileInfoElement = document.querySelector(".equal-file-info");
  if (equalFileInfoElement) {
    equalFileInfoElement.textContent = "These files are equal!";
  }
}







// workbook.xlsx.writeBuffer().then(function(data) {
//   const blob = new Blob([data], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
//   filesave.saveAs(blob, "my-excel-file.xlsx");
// });

// Check if element with class "equal-file-info" exists

// Use the ExcelJS library to parse the contents of the uploaded files into JavaScript objects

// var Excel = require('exceljs');

// Read the data from the second file

// const workbook2 = new ExcelJS.Workbook();
// workbook2.xlsx.readFile('file2.xlsx')
//   .then(() => {
//     const worksheet2 = workbook2.getWorksheet(1);

//     // Compare the data in the two worksheets

//   });

//
//
//
//
//
//
//
//
//
// function handleSubmit(e) {
//   e.preventDefault();

//   const submitButton = document.getElementById('btnUpload');

//   // Listen for the 'click' event on the submit button
//   submitButton.addEventListener('click', () => {
//     // Get the input element that contains the uploaded files

//     // Get the list of uploaded files
//     const input_files_1 = input_1.files;
//     const input_files_2 = input_2.files;

//     if (input_files_1 && input_files_1.length > 0) {
//       // Get the first file in the list of files
//       var file1 = input_files_1[0];

//       const reader = new FileReader();
//       reader.onload = function (event) {
//         // Read the Excel file and extract the data
//         const data = event.target.result;
//         // Create a new instance of the ExcelJS Workbook class

//         // Store the contents of the first Excel file in a variable
//     const firstExcelFile = data;

//       };
//       reader.readAsBinaryString(file1);
//     }

//     // Check if a file was selected
//     if (input_files_2 && input_files_2.length > 0) {
//       // Get the first file in the list of files
//       var file2 = input_files_2[0];

//       const reader = new FileReader();
//       reader.onload = function (event) {
//         // Read the Excel file and extract the data
//         const data = event.target.result;
//         // Store the contents of the second Excel file in a variable
//         const secondExcelFile = data;

//       };

//       reader.readAsBinaryString(file2);

//       // Read the file data into the workbook

//     }

//     const workbook1 = new ExcelJS.Workbook();
//     const workbook2 = new ExcelJS.Workbook();

//     workbook1.xlsx.load(firstExcelFile).then(function() {
//       workbook2.xlsx.load(secondExcelFile).then(function() {
//         // Compare the two workbooks using the 'compare' method
//         const comparison = workbook1.compare(workbook2);

//         // Output the comparison results
//         console.log(comparison);

//       });
//     });

//   });

//     // console.log(input_files_1[0].name, input_files_2[0].name);

//   };

//
//
//
//

// Get the selected files
// const file = e.target.files;
// const files = input.files;

// for (let i = 0; i < file.length; i++) {
//  console.log(file[i].name);
//   }

// const workbook = new ExcelJS.Workbook();
// console.log(file);

//   workbook.xlsx.readFile(file)
//   .then(() => {
//     // Get the first worksheet in the workbook
//     const worksheet = workbook.getWorksheet(1);
// console.log(worksheet);
//   // Get the cell at the first row and first column
//   const cell = worksheet.getCell('B6');

//   // Use the cell object to access the cell's value, data type, and other properties
//   console.log(cell.value);
//   console.log(cell.type);
// });

// // INput 1

// input_1.addEventListener("change", function () {
//   // Check if a file was selected
//   if (this.files && this.files.length > 0) {
//     // Get the first file in the list of files
//     var file1 = this.files[0];

//     const reader = new FileReader();
//     reader.onload = function (event) {
//       // Read the Excel file and extract the data
//       const data = event.target.result;
//       // Create a new instance of the ExcelJS Workbook class

//       // Store the contents of the first Excel file in a variable
//   const firstExcelFile = data;

//       // var workbook = new ExcelJS.Workbook();
//       // workbook.xlsx.load(reader.result) .then(() => {
//       //   // Use the getWorksheet method to access the worksheets in the workbook
//       //   const worksheet = workbook.getWorksheet('Sheet1');

//       //   // Use the eachRow method to iterate through the rows in the worksheet
//       //   worksheet.eachRow(row => {
//       //     // Use the values property to access the cell values in the row
//       //     const values = row.values;
//       //     console.log(values);
//       //   });
//       // });
//     };
//     reader.readAsBinaryString(file1);

//     // Read the file data into the workbook
//   }
// });

// input_2.addEventListener("change", function () {
//   // Check if a file was selected
//   if (this.files && this.files.length > 0) {
//     // Get the first file in the list of files
//     var file2 = this.files[0];

//     const reader = new FileReader();
//     reader.onload = function (event) {
//       // Read the Excel file and extract the data
//       const data = event.target.result;
//       // Store the contents of the second Excel file in a variable
//       const secondExcelFile = data;

//       // var workbook = new ExcelJS.Workbook();
//       // workbook.xlsx.load(reader.result) .then(() => {
//       //   // Use the getWorksheet method to access the worksheets in the workbook
//       //   const worksheet = workbook.getWorksheet('Sheet1');

//       //   // Use the eachRow method to iterate through the rows in the worksheet
//       //   worksheet.eachRow(row => {
//       //     // Use the values property to access the cell values in the row
//       //     const values = row.values;
//       //     console.log(values);
//       //   });
//       // });
//     };
//     reader.readAsBinaryString(file2);

//     // Read the file data into the workbook
//   }
// });

// // Use ExcelJS to parse the contents of the two Excel files

// const workbook1 = new ExcelJS.Workbook();
// const workbook2 = new ExcelJS.Workbook();

// workbook1.xlsx.load(firstExcelFile).then(function() {
//   workbook2.xlsx.load(secondExcelFile).then(function() {
//     //     // Compare the two workbooks using the 'compare' method
//     const comparison = workbook1.compare(workbook2);

//     // Output the comparison results
//     console.log(comparison);
//   });
// });

// // Read the two Excel files using the 'Workbook' class from the exceljs library
// const workbook1 = new exceljs.Workbook();
// workbook1.xlsx.readFile('file1.xlsx').then(() => {
//   const workbook2 = new exceljs.Workbook();
//   workbook2.xlsx.readFile('file2.xlsx').then(() => {
//     // Compare the two workbooks using the 'compare' method
//     const comparison = workbook1.compare(workbook2);

//     // Output the comparison results
//     console.log(comparison);
//   });
// });




<!-- const workbook1 = new ExcelJS.Workbook();
const workbook2 = new ExcelJS.Workbook();
Use the readFile() method to read the contents of the excel files and load them into the workbook objects:
Copy code
workbook1.readFile('file1.xlsx');
workbook2.readFile('file2.xlsx');
Use the getWorksheet() method to get the worksheet objects from the workbook objects:
Copy code
const worksheet1 = workbook1.getWorksheet(1);
const worksheet2 = workbook2.getWorksheet(1); 
for (let row = 1; row <= worksheet1.rowCount; row++) {
  for (let col = 1; col <= worksheet1.columnCount; col++) {
    if (worksheet1.getCell(row, col).value !== worksheet2.getCell(row, col).value) {
      console.log(`Cell ${row},${col} does not match`);
    }
  }
}
Use the writeFile() method to write the changes made to the workbook objects back to the excel files:
Copy code
workbook1.writeFile('file1.xlsx');
workbook2.writeFile('file2.xlsx');
-->

<!-- 
  Import the necessary libraries, such as ExcelJS and FileSaver.js, into your JavaScript code.

Use the FileReader API to read the data from the Excel files that were uploaded by the user.

Use the ExcelJS or SheetJS library to parse the data from the Excel files and store it in variables or arrays.

Compare the data from the two Excel files, using JavaScript comparison operators or other methods.

Generate a new Excel file with the comparison results, using the ExcelJS or SheetJS library.

Use the saveAs function from the FileSaver.js library to download the new Excel file to the user's device. -->




<!-- To upload and display an Excel file using JavaScript, you can use the following steps:

Create an <input> element with the type attribute set to "file" and the accept attribute set to ".xls,.xlsx" to allow the user to select an Excel file.
Copy code
<input type="file" accept=".xls,.xlsx" id="file-input">
Add an event listener to the <input> element that listens for the change event. This event is triggered when the user selects a file.
Copy code
document.getElementById('file-input').addEventListener('change', function(event) {
  // handle the file selection
});
In the event listener callback function, get the selected file from the event.target.files property. This property is a list of files that were selected by the user. In this case, we are assuming that the user will only select one file.
Copy code
const file = event.target.files[0];
Use the FileReader API to read the contents of the file as a binary string. The FileReader API lets you read the contents of files asynchronously.
Copy code
const reader = new FileReader();
reader.readAsBinaryString(file);
Add an event listener to the reader object that listens for the load event. This event is triggered when the file has been read and the data is available.
Copy code
reader.addEventListener('load', function(event) {
  // handle the file data
});
In the event listener callback function, get the file data from the event.target.result property. This property contains the file data as a binary string.
Copy code
const data = event.target.result;
Use the XLSX.read method from the xlsx library to parse the Excel data. The XLSX.read method returns a workbook object that contains the Excel data.
Copy code
const workbook = XLSX.read(data, { type: 'binary' });
Use the workbook.SheetNames property to get the names of the sheets in the workbook.
Copy code
const sheetNames = workbook.SheetNames;
Use the workbook.Sheets property to get the sheets in the workbook. The workbook.Sheets property is an object that contains the data for each sheet in the workbook.
Copy code
const sheets = workbook.Sheets;
Use the XLSX.utils.sheet_to_json method to convert the data for a sheet into a JavaScript object. This method converts the sheet data into an array of objects, where each object represents a row in the sheet.
Copy code
const sheetData = XLSX.utils.sheet_to_json(sheets[sheetNames[0]]);
Use the sheetData array to display the Excel data in the HTML page. For example, you can use a <table> element to display the data as a table.
Copy code
const table = document.createElement('table'); -->

<!-- // Open the two Excel files that you want to compare
let file1 = new File("file1.xlsx");
let file2 = new File("file2.xlsx");

// Use the File API to read the contents of the two files
let file1Data = file1.readAsBinaryString();
let file2Data = file2.readAsBinaryString();

// Parse the Excel data from the two files using SheetJS
let file1Parsed = XLSX.read(file1Data, {type: "binary"});
let file2Parsed = XLSX.read(file2Data, {type: "binary"});

// Compare the parsed data to identify any differences
let differences = compareExcelData(file1Parsed, file2Parsed);

// Display the results of the comparison
document.write(differences); -->

<!-- NODE JS

To upload and compare two Excel files and display the result using JavaScript and node.js, you can use the following steps:

Install the 'multer' and 'xlsx' packages using npm:
Copy code
npm install multer xlsx
Import the 'multer' and 'xlsx' packages in your node.js file:
Copy code
const multer = require('multer');
const xlsx = require('xlsx');
Configure the multer middleware to handle file uploads and specify the directory where the uploaded files should be stored:
Copy code
const upload = multer({ dest: 'uploads/' });
Add the multer middleware to the route handling file uploads:
Copy code
app.post('/upload', upload.array('files', 2), (req, res) => {
    // handle file upload here
});
In the route handling file uploads, access the uploaded files using the 'req.files' array and read the Excel files using the 'xlsx' module:
Copy code
app.post('/upload', upload.array('files', 2), (req, res) => {
    const file1 = xlsx.readFile(req.files[0].path);
    const file2 = xlsx.readFile(req.files[1].path);
});
Compare the two Excel files by looping through the sheets and cells in each file and comparing the values:
Copy code
app.post('/upload', upload.array('files', 2), (req, res) => {
    const file1 = xlsx.readFile(req.files[0].path);
    const file2 = xlsx.readFile(req.files[1].path);

    let result = '';

    file1.SheetNames.forEach((sheetName) => {
        const sheet1 = file1.Sheets[sheetName];
        const sheet2 = file2.Sheets[sheetName];

        for (let cell in sheet1) {
            if (sheet1[cell].v !== sheet2[cell].v) {
                result += `${sheetName}: ${cell} - file1: ${sheet1[cell].v}, file2: ${sheet2[cell].v}\n`;
            }
        }
    });

    res.send(result);
});
Note: In the above code, 'files' is the name of the input field in the HTML form used to upload the files. You may need to adjust this depending on your form setup.-->
